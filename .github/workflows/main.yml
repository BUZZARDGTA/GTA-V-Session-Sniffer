name: Build and Release for Windows

on:
  push:
    branches:
      - main
    paths:
      - 'Session_Sniffer.py'  # Trigger only when changes are made to this file

jobs:
  build-x64:
    runs-on: windows-latest
    name: Build Windows x64 Executable
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
        architecture: x64

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller Session_Sniffer-x64.spec
      # Output will be in the `dist/` folder

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Session_Sniffer-x64
        path: dist/Session_Sniffer-x64.exe

  build-x86:
    runs-on: windows-latest
    name: Build Windows x86 Executable
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
        architecture: x86

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller Session_Sniffer-x86.spec
      # Output will be in the `dist/` folder

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Session_Sniffer-x86
        path: dist/Session_Sniffer-x86.exe

  release:
    needs: [build-x64, build-x86]
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Generate Tag Using Python Script
        id: generate_tag
        run: |
          # Get the generated tag from the Python script
          TAG_NAME=$(python "$GITHUB_WORKSPACE/.github/workflows/generate_tag.py")

          # Check if the tag already exists
          if git tag -l "$TAG_NAME"; then
            echo "Error: Tag $TAG_NAME already exists."
            exit 1
          fi

          # If the tag does not exist, continue and set the tag
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Download x64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: Session_Sniffer-x64

      - name: Download x86 Artifact
        uses: actions/download-artifact@v4
        with:
          name: Session_Sniffer-x86

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: |
            dist/Session_Sniffer-x64.exe
            dist/Session_Sniffer-x86.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ env.tag_name }}
          tag: ${{ env.tag_name }}
          commit: ${{ github.sha }}
          prerelease: true
